name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: api-gateway/package-lock.json
    
    - name: Install API Gateway dependencies
      run: |
        cd api-gateway
        npm ci
    
    - name: Run API Gateway tests
      run: |
        cd api-gateway
        npm test
    
    - name: Run API Gateway linting
      run: |
        cd api-gateway
        npm run lint

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        cd database-manager
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        cd database-manager
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        cd database-manager
        black --check .
    
    - name: Test with pytest
      run: |
        cd database-manager
        pytest

  test-java:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['11', '17', '21']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Maven tests
      run: |
        cd code-generator
        mvn clean test
    
    - name: Check code style
      run: |
        cd code-generator
        mvn checkstyle:check

  test-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Build Go microservice
      run: |
        cd go-microservice
        go build -v ./...
    
    - name: Test Go microservice
      run: |
        cd go-microservice
        go test -v ./...
    
    - name: Run go vet
      run: |
        cd go-microservice
        go vet ./...
    
    - name: Run golint
      run: |
        cd go-microservice
        go install golang.org/x/lint/golint@latest
        golint ./...

  test-rust:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: ['stable', 'beta']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust-version }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Rust project
      run: |
        cd rust-data-processor
        cargo build --verbose
    
    - name: Run Rust tests
      run: |
        cd rust-data-processor
        cargo test --verbose
    
    - name: Check Rust formatting
      run: |
        cd rust-data-processor
        cargo fmt -- --check
    
    - name: Run Clippy
      run: |
        cd rust-data-processor
        cargo clippy -- -D warnings

  test-cpp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build C++ project
      run: |
        cd performance-monitor
        mkdir -p build
        cd build
        cmake ..
        make
    
    - name: Run C++ tests
      run: |
        cd performance-monitor/build
        # Add test execution here when tests are available
        echo "C++ tests would run here"

  test-php:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        tools: composer, phpunit
    
    - name: Install PHP dependencies
      run: |
        cd task-automation
        composer install --prefer-dist --no-progress
    
    - name: Run PHP tests
      run: |
        cd task-automation
        # Add PHPUnit tests when available
        echo "PHP tests would run here"

  test-ruby:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['3.0', '3.1', '3.2']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: Run Ruby tests
      run: |
        cd ruby-analytics
        # Add RSpec tests when available
        echo "Ruby tests would run here"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-nodejs, test-python, test-java, test-go, test-rust, test-cpp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        cd docker
        docker-compose build
    
    - name: Test Docker deployment
      run: |
        cd docker
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
